name: Build replicator

on:
  pull_request:
    branches: [ main ]
  workflow_call:
    outputs:
      release-version:
        description: Release version
        value: ${{ jobs.create-version.outputs.version }}
      should-release:
        description: Checks if release would occur
        value: ${{ jobs.should-release.outputs.should-release }}

jobs:
  should-release:
    needs:
      - create-version
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.confirm-release.outputs.test }}
    steps:
      - name: checkout main
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: confirm release
        id: confirm-release
        run: echo "test=$(git tag --list 'v${{ needs.create-version.outputs.version }}' | wc -l | sed s/\ //g)" >> $GITHUB_OUTPUT

  message:
    runs-on: ubuntu-latest
    needs:
      - should-release
      - create-version
    steps:
      - name: Message about build
        uses: actions/github-script@v7
        with:
          script: |
            if (${{ needs.should-release.outputs.should-release }} == 0) {
              core.notice('Will release version ${{ needs.create-version.outputs.version }}...')
            } else {
              core.warning('Will not create release for version ${{ needs.create-version.outputs.version }} because it already exists.')
            }

  current-branch:
    needs:
      - should-release
    runs-on: ubuntu-latest
    outputs:
      current-branch: ${{ steps.current-branch.outputs.branch }}
    steps:
      - name: Get branch name
        id: current-branch
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_OUTPUT"

  create-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - name: update pip
        run: pip install --upgrade pip

      - name: install toml parser
        run: pip install toml

      - name: fetch-version from pyproject.toml
        id: fetch-version
        run: |
          python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])" > version.txt
          echo "latest_version=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: debug-version
        run: echo ${{ steps.fetch-version.outputs.latest_version }}

      - name: get-version
        id: get-version
        run: echo "version=${{ steps.fetch-version.outputs.latest_version }}" >> $GITHUB_OUTPUT

  generate-sbom:
    needs:
      - create-version
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: checkout branch
        uses: actions/checkout@v4

      - name: ensure curl
        run: sudo apt-get -qq install curl

      - name: install sbom tool
        run: |
          curl -Lo sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
          chmod +x sbom-tool
          sudo mv sbom-tool /usr/local/bin/

      - name: Install uv
        run: pip install uv

      - name: Isolate target binary files
        run: cp -r cdf_s3_replicator sbom

      - name: Remove unnecessary files
        run: find sbom -iname __pycache__ -type d -exec rm -r {} + 2>/dev/null || true

      - name: Export requirements
        run: |
          uv pip compile pyproject.toml -o sbom/requirements.txt

      - name: Generate sbom
        run: |
          sbom-tool generate \
            -b sbom \
            -bc sbom \
            -pn cdf-s3-replicator \
            -pv ${{ needs.create-version.outputs.version }} \
            -ps Cognite \
            -nsb https://sbom.cognite.com

      - name: Move generated json
        run: mv sbom/_manifest/spdx_2.2/* .

      - name: Delete isolation
        run: rm -rf sbom

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: manifest.spdx.json*

  build-linux:
    runs-on: ubuntu-latest
    environment: ${{ needs.current-branch.outputs.current-branch == 'main' && 'CD' || 'CI' }}
    needs:
      - generate-sbom
      - create-version
      - current-branch
      - should-release
    steps:
      - uses: actions/checkout@v4

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: pip install uv

      - name: Create venv
        run: uv venv

      - name: Install dependencies
        run: uv pip install -e .

      - name: Build executable with PyInstaller
        run: |
          uv run pyinstaller \
            --onefile \
            --name cdf-s3-replicator-${{ needs.create-version.outputs.version }} \
            --hidden-import cdf_s3_replicator \
            --hidden-import deltalake \
            --hidden-import pyarrow \
            --hidden-import boto3 \
            --add-data "cdf_s3_replicator:cdf_s3_replicator" \
            cdf_s3_replicator/__main__.py

      - name: Download sbom artifacts
        uses: actions/download-artifact@v4
        with:
          name: sbom-artifacts
          path: .

      - name: Create tarball
        run: |
          mkdir -p cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux
          cp dist/cdf-s3-replicator-${{ needs.create-version.outputs.version }} cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux/
          cp example_config.yaml cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux/ || true
          cp example_config.yaml cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux/config.yaml.example || true
          cp manifest.spdx.json* cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux/
          tar -czf cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux.tar.gz cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux/

      - name: Upload artifacts
        if: ${{ needs.current-branch.outputs.current-branch == 'main' && needs.should-release.outputs.should-release == 0}}
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: cdf-s3-replicator-${{ needs.create-version.outputs.version }}-linux.tar.gz

  build-docker-image:
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.current-branch.outputs.current-branch == 'main' && 'CD' || 'CI' }}
    needs:
      - generate-sbom
      - create-version
      - current-branch
      - should-release
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true

    - name: Install uv (for lock refresh)
      run: pip install uv

    - name: Create uv.lock for Docker
      run: uv lock

    - name: Build Docker image
      run: docker build -t cognite/cdf-s3-replicator:${{ needs.create-version.outputs.version }} -f build/Dockerfile --load .

    - name: Export docker image
      run: docker save -o cdf-s3-replicator-${{ needs.create-version.outputs.version }}-docker.tar cognite/cdf-s3-replicator:${{ needs.create-version.outputs.version }}

    - name: Upload artifact
      if: ${{ needs.current-branch.outputs.current-branch == 'main' && needs.should-release.outputs.should-release == 0 }}
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: ./cdf-s3-replicator-${{ needs.create-version.outputs.version }}-docker.tar
